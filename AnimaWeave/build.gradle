plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'antlr'
}

group = 'SeeleFelix'
version = '0.0.1-SNAPSHOT'

// 明确指定Spring Boot主类
springBoot {
	mainClass = 'SeeleFelix.AnimaWeave.AnimaWeaveApplication'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	// Spring Boot 核心
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	// 事件驱动架构
	implementation 'org.springframework:spring-context'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	
	// DSL解析 - ANTLR
	antlr 'org.antlr:antlr4:4.13.1'
	implementation 'org.antlr:antlr4-runtime:4.13.1'
	
	// JSON处理
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	
	// 并发处理工具
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// 开发工具
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	
	// 测试依赖
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// 添加Selfie JVM Snapshot Testing依赖 - 现代化替代方案
	testImplementation 'com.diffplug.selfie:selfie-runner-junit5:2.5.3'
}

// ANTLR配置
generateGrammarSource {
	maxHeapSize = "64m"
	arguments += ["-visitor", "-long-messages"]
	// 输出目录会根据包结构自动确定
}

// 确保编译前生成ANTLR代码
compileJava.dependsOn generateGrammarSource
sourcesJar.dependsOn generateGrammarSource
javadocJar.dependsOn generateGrammarSource

tasks.named('test') {
	useJUnitPlatform()
	// 启用Virtual Threads用于测试
	jvmArgs += ["--enable-preview"]
	
	// Selfie JVM snapshot testing配置 - 按照官方文档配置
	environment project.properties.subMap(["selfie"])
	inputs.files(fileTree("src/test") {
		include "**/*.ss"
	})
	
	// 添加Selfie需要的系统属性传递
	systemProperties System.properties.findAll { key, value ->
		key.startsWith("selfie")
	}
	
	// 强制测试总是运行 - 用于开发调试
	outputs.upToDateWhen { false }
}

// 自定义task：生成.anima文件
task generateAnimaFiles(type: JavaExec) {
	group = 'vessel'
	description = '从Java Vessel定义生成.anima文件到sanctums目录'
	
	dependsOn compileJava
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'SeeleFelix.AnimaWeave.tools.generator.AnimaGeneratorCliApp'  // 修复类名
	
	// 可以传递参数
	if (project.hasProperty('outputDir')) {
		args project.property('outputDir')
	}
	
	doFirst {
		println '🔨 开始生成vessel .anima文件...'
	}
	
	doLast {
		println '✅ .anima文件生成完成！'
		println '📁 文件保存在: ./sanctums/ 目录'
	}
}