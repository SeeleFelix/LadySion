plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'antlr'
	// 代码质量检查插件 - 全套武器库
	id 'checkstyle'
	id 'pmd'
	id 'com.github.spotbugs' version '6.2.0'
	// TODO: 暂时禁用 Error Prone，待修复代码问题后再启用
	// id 'net.ltgt.errorprone' version '4.2.0'
	// id 'net.ltgt.nullaway' version '2.2.0'
	// 代码自动格式化插件
	id 'com.diffplug.spotless' version '7.0.4'
	// 依赖版本检查插件
	id 'com.github.ben-manes.versions' version '0.52.0'
}

group = 'SeeleFelix'
version = '0.0.1-SNAPSHOT'

// 明确指定Spring Boot主类
springBoot {
	mainClass = 'SeeleFelix.AnimaWeave.AnimaWeaveApplication'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	// Spring Boot 核心
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	// 事件驱动架构
	implementation 'org.springframework:spring-context:6.2.8'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	
	// DSL解析 - ANTLR
	antlr 'org.antlr:antlr4:4.13.2'
	implementation 'org.antlr:antlr4-runtime:4.13.2'
	
	// JSON处理
	implementation 'com.fasterxml.jackson.core:jackson-core:2.19.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.1'
	
	// 并发处理工具
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	
	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	
	// 开发工具
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	
	// 测试依赖
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.1'
	
	// 添加Selfie JVM Snapshot Testing依赖 - 现代化替代方案
	testImplementation 'com.diffplug.selfie:selfie-runner-junit5:2.5.3'
	
	// TODO: Error Prone 和 NullAway 依赖（暂时禁用）
	// errorprone 'com.google.errorprone:error_prone_core:2.35.1'
	// errorprone 'com.uber.nullaway:nullaway:0.12.3'
}

// ANTLR配置
generateGrammarSource {
	maxHeapSize = "64m"
	arguments += ["-visitor", "-long-messages"]
	// 输出目录会根据包结构自动确定
}

// 确保编译前生成ANTLR代码
compileJava.dependsOn generateGrammarSource
sourcesJar.dependsOn generateGrammarSource
javadocJar.dependsOn generateGrammarSource

tasks.named('test') {
	useJUnitPlatform()
	// 启用Virtual Threads用于测试
	jvmArgs += ["--enable-preview"]
	
	// Selfie JVM snapshot testing配置 - 按照官方文档配置
	environment project.properties.subMap(["selfie"])
	inputs.files(fileTree("src/test") {
		include "**/*.ss"
	})
	
	// 添加Selfie需要的系统属性传递
	systemProperties System.properties.findAll { key, value ->
		key.startsWith("selfie")
	}
	
	// 强制测试总是运行 - 用于开发调试
	outputs.upToDateWhen { false }
}

// 代码质量检查配置 - 使用现有配置文件
checkstyle {
	toolVersion = '10.25.0'
	configFile = file('config/checkstyle/checkstyle.xml')
	maxWarnings = 0
	maxErrors = 0
}

// 排除生成的代码
tasks.withType(Checkstyle) {
	exclude '**/build/generated-src/**'
	exclude '**/parser/**'  // ANTLR生成的代码
}

spotbugs {
	toolVersion = '4.9.3'
	excludeFilter = file('config/spotbugs/exclude.xml')
	effort = 'max'
	reportLevel = 'low'
	ignoreFailures = false
}

// 自定义task：生成.anima文件
task generateAnimaFiles(type: JavaExec) {
	group = 'vessel'
	description = '从Java Vessel定义生成.anima文件到sanctums目录'
	
	dependsOn compileJava
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'SeeleFelix.AnimaWeave.tools.generator.AnimaGeneratorCliApp'  // 修复类名
	
	// 可以传递参数
	if (project.hasProperty('outputDir')) {
		args project.property('outputDir')
	}
	
	doFirst {
		println '🔨 开始生成vessel .anima文件...'
	}
	
	doLast {
		println '✅ .anima文件生成完成！'
		println '📁 文件保存在: ./sanctums/ 目录'
	}
}

// 依赖版本检查配置
tasks.named("dependencyUpdates").configure {
	// 检查频率设置
	checkForGradleUpdate = true
	outputFormatter = "json"
	outputDir = "build/dependencyUpdates"
	reportfileName = "report"
	
	// 版本过滤规则 - 排除不稳定版本
	rejectVersionIf { selection ->
		selection.candidate.version.contains('-alpha') ||
		selection.candidate.version.contains('-beta') ||
		selection.candidate.version.contains('-rc') ||
		selection.candidate.version.contains('-M') ||
		selection.candidate.version.contains('-milestone') ||
		selection.candidate.version.contains('-dev') ||
		selection.candidate.version.contains('-SNAPSHOT')
	}
	
	// 只检查稳定版本
	revision = "release"
}

// Spotless代码自动格式化配置
spotless {
	java {
		// 排除生成的代码
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/generated-src/**'
		}
		
		googleJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// ========== 代码质量工具配置 ==========

// PMD配置
pmd {
	toolVersion = '7.11.0'
	ruleSetFiles = files('config/pmd/ruleset.xml')
	ruleSets = [] // 清空默认规则集，使用自定义文件
	consoleOutput = true
	ignoreFailures = false
}

// TODO: Error Prone配置（暂时禁用）
// tasks.withType(JavaCompile).configureEach {
// 	options.errorprone {
// 		disableWarningsInGeneratedCode = true
// 		excludedPaths = '.*/build/generated-src/.*'
// 		
// 		// 启用严格的检查
// 		allErrorsAsWarnings = false
// 		allDisabledChecksAsWarnings = false
// 		
// 		// 一些有用的检查
// 		error('NullAway')
// 		error('DeadException')
// 		error('UnusedVariable')
// 		error('UnusedMethod')
// 		warn('MissingOverride')
// 		warn('DefaultCharset')
// 		
// 		// NullAway任务级配置
// 		nullaway {
// 			error()
// 			unannotatedSubPackages.add('SeeleFelix.AnimaWeave.parser')  // ANTLR生成的代码
// 			treatGeneratedAsUnannotated.set(true)
// 			acknowledgeRestrictiveAnnotations.set(true)
// 		}
// 	}
// }

// TODO: NullAway配置（暂时禁用）
// nullaway {
// 	annotatedPackages.add('SeeleFelix.AnimaWeave')
// }

// ========== 自定义质量检查任务 ==========

// 快速检查任务（包含测试）
task quickCheck {
	group = 'verification'
	description = '快速代码质量检查（格式化 + 静态分析 + 测试）'
	dependsOn 'spotlessApply', 'checkstyleMain', 'pmdMain', 'spotbugsMain', 'test'
	
	doLast {
		println '✅ 快速代码质量检查完成！'
	}
}

// 质量报告任务
task qualityReport {
	group = 'verification'
	description = '生成所有质量检查报告的汇总'
	dependsOn 'check'
	
	doLast {
		println '📊 质量报告已生成：'
		println '  - Checkstyle: build/reports/checkstyle/'
		println '  - PMD: build/reports/pmd/'
		println '  - SpotBugs: build/reports/spotbugs/'
		println '  - 测试报告: build/reports/tests/'
	}
}

